<?php

/**
 * LDAP and YubiKey 2 factor authentication module.
 * *
 * Configure it by adding an entry to config/authsources.php such as this:
 *
 *
 *        'ldapandyubi' => array(
 *                'ldapandyubi:ldapandyubi',
 *
 *                'ldap.hostname' => 'ldap.example.com',
 *                'ldap.search.base' => 'ou=People,o=org,c=country',
 *                'ldap.search.attribute' => 'uid',
 *                'ldap.search.scope' => 'onelevel',
 *                'ldap.search.filter' => 'activityStatus=active',
 *                'ldap.search.dn' => 'uid=apache,o=org,c=country',
 *                'ldap.search.password' => 'bigsecret',
 *
 *                'db.dsn' => 'mysql:host=db.example.com;port=3306;dbname=idpldapandyubi',
 *                'db.username' => 'simplesaml',
 *                'db.password' => 'bigsecret',
 *
 *                'yubi.url' => 'aai.example.com/yubikey-val/verify.php',
 *                'yubi.client.id' => '1',
 *                'yubi.client.key' => 'bigsecretkey'), 
 *        ),

 *
 * @package simpleSAMLphp
 * @version $Id$
 */

class sspmod_ldapandyubi_Auth_Source_ldapandyubi extends SimpleSAML_Auth_Source {

	/**
	 * The string used to identify our states.
	 */
	const STAGEID = 'ldapandyubi.stage';

	/**
	 * The number of characters of the OTP that is the secure token.
	 * The rest is the user id.
	 */
	const TOKENSIZE = 32;

	/**
	 * The key of the AuthId field in the state.
	 */
	const AUTHID = 'sspmod_ldapandyubi_Auth_Source_ldapandyubi.AuthId';

        /**
         *   sstc-saml-loa-authncontext-profile-draft.odt
        */

        const TFAAUTHNCONTEXTCLASSREF = 'urn:oasis:names:tc:SAML:2.0:post:ac:classes:nist-800-63:3';

	/**
	 * The client id/key for use with the Auth_Yubico PHP module.
	 */

      

	private $yubi_url;
	private $yubi_id;
	private $yubi_key;


        private $ldap_hostname;
        private $ldap_search_dn;
        private $ldap_search_password;
        private $ldap_search_idp_dn;
        private $ldap_search_idp_password;
        private $ldap_search_base;
        private $ldap_search_attribute;

        private $db_dsn;
        private $db_username;
        private $db_password;
        private $dbh;


        private $tfa_authencontextclassref;

	/**
	 * Constructor for this authentication source.
	 *
	 * @param array $info  Information about this authentication source.
	 * @param array $config  Configuration.
	 */
	public function __construct($info, $config) {
		assert('is_array($info)');
		assert('is_array($config)');

		/* Call the parent constructor first, as required by the interface. */
		parent::__construct($info, $config);

		if (array_key_exists('yubi.url', $config)) {
			$this->yubi_url = $config['yubi.url'];
		}

		if (array_key_exists('yubi.client.id', $config)) {
			$this->yubi_id = $config['yubi.client.id'];
		}

		if (array_key_exists('yubi.client.key', $config)) {
			$this->yubi_key = $config['yubi.client.key'];
		}
                /* LDAP */
		if (array_key_exists('ldap.hostname', $config)) {
			$this->ldap_hostname = $config['ldap.hostname'];
		}
		if (array_key_exists('ldap.search.dn', $config)) {
			$this->ldap_search_dn = $config['ldap.search.dn'];
		}
		if (array_key_exists('ldap.search.password', $config)) {
			$this->ldap_search_password = $config['ldap.search.password'];
		}
		if (array_key_exists('priv.username', $config)) {
			$this->ldap_search_idp_dn = $config['priv.username'];
		}
		if (array_key_exists('priv.password', $config)) {
			$this->ldap_search_idp_password = $config['priv.password'];
		}
		if (array_key_exists('ldap.search.base', $config)) {
			$this->ldap_search_base = $config['ldap.search.base'];
		}
		if (array_key_exists('ldap.search.attribute', $config)) {
			$this->ldap_search_attribute = $config['ldap.search.attribute'];
		}



		if (array_key_exists('db.dsn', $config)) {
			$this->db_dsn = $config['db.dsn'];
		}
		if (array_key_exists('db.username', $config)) {
			$this->db_username = $config['db.username'];
		}
		if (array_key_exists('db.password', $config)) {
			$this->db_password = $config['db.password'];
		}

                $this->tfa_authencontextclassref = self::TFAAUTHNCONTEXTCLASSREF;
                try {
                  $this->dbh = new PDO($this->db_dsn, $this->db_username, $this->db_password);
                } catch (PDOException $e) {
                  var_dump($this->db_dsn, $this->db_username, $this->db_password);
                    echo 'Connection failed: ' . $e->getMessage();
                }
                $this->createTables();
               
/*TODO konfig ellenőrzés*/
	}


	/**
	 * Initialize login.
	 *
	 * This function saves the information about the login, and redirects to a
	 * login page.
	 *
	 * @param array &$state  Information about the current authentication.
	 */
	public function authenticate(&$state) {
		assert('is_array($state)');

		/* We are going to need the authId in order to retrieve this authentication source later. */
		$state[self::AUTHID] = $this->authId;

		$id = SimpleSAML_Auth_State::saveState($state, self::STAGEID);

		$url = SimpleSAML_Module::getModuleURL('ldapandyubi/login.php');
		SimpleSAML_Utilities::redirect($url, array('AuthState' => $id));
	}
	
	
	/**
	 * Handle login request.
	 *
	 * @param string $authStateId  The identifier of the authentication state.
	 * @param string $otp  The one time password entered-
	 * @return string  Error code in the case of an error.
	 */
	public static function handleLogin($authStateId, $otp, $pass, $settings) {
		assert('is_string($authStateId)');
		assert('is_string($otp)');
		assert('is_string($pass)');
		assert('is_bool($settings)');

        	if ($otp == "") {
				return 'WRONGUSERPASS';
	        }
        	//if ($pass == "") {
		//		return 'WRONGUSERPASS';
	        //}
		/* Retrieve the authentication state. */
		$state = SimpleSAML_Auth_State::loadState($authStateId, self::STAGEID);

		/* Find authentication source. */
		assert('array_key_exists(self::AUTHID, $state)');
		$source = SimpleSAML_Auth_Source::getById($state[self::AUTHID]);
		if ($source === NULL) {
			throw new Exception('Could not find authentication source with id ' . $state[self::AUTHID]);
		}


		try {
			/* Attempt to log in. */
			$attributes = $source->login($otp,$pass);
                        //$attributes['pass'][0] = $pass; // TODO WARNING DONTDONTDONT
		} catch (SimpleSAML_Error_Error $e) {
			/* An error occured during login. Check if it is because of the wrong
			 * username/password - if it is, we pass that error up to the login form,
			 * if not, we let the generic error handler deal with it.
			 */
                        $errorcodes = array (
				'WRONGUSERPASS',
				'HAVETOUSEOTP',
				'HAVENOTTOUSEOTP',
				'INVALIDYUBI',
				'WRONGLDAPSEARCHIDPDN',
                        );
                        foreach ($errorcodes as $ec){
			  if ($e->getErrorCode() === $ec) {
				return $ec;
			  }
                        }

			/* Some other error occured. Rethrow exception and let the generic error
			 * handler deal with it.
			 */
			throw $e;
		}

                if (array_key_exists('ldapandyubi:2fa',$attributes)) {
                  unset($attributes['ldapandyubi:2fa']);
                  $state['saml:AuthnContextClassRef'] = self::TFAAUTHNCONTEXTCLASSREF;
                }
		$state['Attributes'] = $attributes;

                if (array_key_exists('ldapandyubi:requiredpotp',$attributes)){
		    $stateid = SimpleSAML_Auth_State::saveState($state,'ldapandyubi.potp');
		    $url = SimpleSAML_Module::getModuleURL('ldapandyubi/potp.php');
		    SimpleSAML_Utilities::redirect($url, array('AuthState' => $stateid));
                }

                if ($settings){
                  $state['ldapandyubi:settings'] = TRUE;
                }
                SimpleSAML_Logger::info('ldapandyubi: ' . $uid . ' successful authenticated.');
		SimpleSAML_Auth_Source::completeAuth($state);
	}
	
	/**
	 * Handle potp request.
	 *
	 * @param string $authStateId  The identifier of the authentication state.
	 * @param string $otp  The one time password entered-
	 * @return string  Error code in the case of an error.
	 */
	public static function handlePOTP($authStateId, $potp) {
		assert('is_string($authStateId)');
		assert('is_string($potp)');

        	if ($potp == "") {
				return 'WRONGPOTP';
	        }
		/* Retrieve the authentication state. */
		$state = SimpleSAML_Auth_State::loadState($authStateId, 'ldapandyubi.potp');
                $uid = $state['Attributes']['uid'][0];

		/* Find authentication source. */
		assert('array_key_exists(self::AUTHID, $state)');
		$source = SimpleSAML_Auth_Source::getById($state[self::AUTHID]);
		if ($source === NULL) {
			throw new Exception('Could not find authentication source with id ' . $state[self::AUTHID]);
		}


		try {
			/* Attempt to log in. */
                        $source->isValidPOTP($uid,$potp);
		} catch (SimpleSAML_Error_Error $e) {
			/* An error occured during login. Check if it is because of the wrong
			 * username/password - if it is, we pass that error up to the login form,
			 * if not, we let the generic error handler deal with it.
			 */
                        $errorcodes = array (
				'WRONGPOTP',
                        );
                        foreach ($errorcodes as $ec){
			  if ($e->getErrorCode() === $ec) {
				return $ec;
			  }
                        }

			/* Some other error occured. Rethrow exception and let the generic error
			 * handler deal with it.
			 */
			throw $e;
		}

                $state['saml:AuthnContextClassRef'] = self::TFAAUTHNCONTEXTCLASSREF;
                SimpleSAML_Logger::info('ldapandyubi: ' . $uid . ' successful authenticated with POTP.');
		SimpleSAML_Auth_Source::completeAuth($state);
	}

	/**
	 * Return the user id part of a one time passord
	 */
	public static function getYubiKeyPrefix($otp) {
		$uid = substr ($otp, 0, strlen ($otp) - self::TOKENSIZE);
		return $uid;
	}

	/**
	 * Attempt to log in using the given username and password.
	 *
	 * On a successful login, this function should return the users attributes. On failure,
	 * it should throw an exception. If the error was caused by the user entering the wrong
	 * username or password, a SimpleSAML_Error_Error('WRONGUSERPASS') should be thrown.
	 *
	 * Note that both the username and the password are UTF-8 encoded.
	 *
	 * @param string $otp  The username the user wrote.
	 * @return array  Associative array with the users attributes.
	 */
	protected function login($otp,$pass) {
		assert('is_string($otp)');
		assert('is_string($pass)');

		require_once dirname(dirname(dirname(dirname(__FILE__)))) . '/libextinc/Yubico.php';

		$attributes = array();

                if ($pass == "") $pass = FALSE;
                $otpisyubi=FALSE;
                /* yubi or not? */
                if (strlen($otp)>self::TOKENSIZE)
                  $otpisyubi=TRUE;

                if ($otpisyubi and ! $this->isEnabled2fa($this->getUidFromOtp($otp)))
                {
                   $attributes = $this->ldaplogin($this->getUidFromOtp($otp),NULL);
		   return $attributes;
                   /*SimpleSAML_Logger::info('ldapandyubi:' . $this->authId . ': Login error (user ' . $otp . '), have NOT to use OTP!');
                        throw new SimpleSAML_Error_Error('HAVENOTTOUSEOTP', $e);
                   */
                }


                /* if not yubi */
                if (!$otpisyubi)
                {
                    if (!$pass) 
                        throw new SimpleSAML_Error_Error('WRONGUSERPASS', $e);
                    /* is user required 2F?*/
                    if ($this->isEnabled2fa($otp))
                    {                     
                       /*if ($this->isValidPOTP($otp,$potp)){
                         $attributes = $this->ldaplogin($otp,$pass);
                         $attributes['ldapandyubi:2fa'] = TRUE;
		         return $attributes;
                       }
                       */
                       $attributes = $this->ldaplogin($otp,$pass);
                       $attributes['ldapandyubi:requiredpotp'] = TRUE;
		       SimpleSAML_Logger::info('ldapandyubi:' . $this->authId . ': Login error (user ' . $otp . '), have to use OTP!');
		       return $attributes;
                    }
                    /* plain LDAP user login */
                    $attributes = $this->ldaplogin($otp,$pass);
		    return $attributes;
                } 
                
                
                if ($this->isValidYubi($otp)){
                  $attributes = $this->ldaplogin($this->getUidFromOtp($otp),$pass);
                  $attributes['ldapandyubi:2fa'] = TRUE;
                  return $attributes;
                }
            return FALSE;

	}

        private function ldaplogin($uid,$pass){
          $ldap = new SimpleSAML_Auth_LDAP($this->ldap_hostname,FALSE);
          if ($pass){
            $ldap->bind($this->ldap_search_dn,$this->ldap_search_password);
            $dn = $ldap->searchfordn($this->ldap_search_base,
                        $this->ldap_search_attribute,
                        $uid, TRUE
                               );
            if ($dn === NULL) {
              /* User not found with search. */
              SimpleSAML_Logger::info($this->location . ': Unable to find users DN. username=\'' . $username . '\'');
              throw new SimpleSAML_Error_Error('WRONGUSERPASS', $e);
            }
            $binding = $ldap->bind($dn,$pass);
	    if (!$binding){
              SimpleSAML_Logger::info('ldapandyubi:' . $this->authId . ': Validation error (dn ' . $dn . ', uid '.$uid.'), cant bind,' );
              throw new SimpleSAML_Error_Error('WRONGUSERPASS', $e);
	    }
          }
          else {
            $binding = $ldap->bind($this->ldap_search_idp_dn,$this->ldap_search_idp_password);
	    if (!$binding){
              SimpleSAML_Logger::info('ldapandyubi:' . $this->authId . ': Validation error (dn ' . $this->ldap_search_idp_dn . '), cant bind,' );
              throw new SimpleSAML_Error_Error('WRONGLDAPSEARCHIDPDN', $e);
	    }
            $dn = $ldap->searchfordn($this->ldap_search_base,
                        $this->ldap_search_attribute,
                        $uid, TRUE
                               );
            if ($dn === NULL) {
              /* User not found with search. */
              SimpleSAML_Logger::info($this->location . ': Unable to find users DN. username=\'' . $username . '\'');
              throw new SimpleSAML_Error_Error('WRONGUSERPASS', $e);
            }
          }
          $attributes = $ldap->getAttributes($dn);
          return $attributes;
        }

        private function isValidYubi($otp){
          /* TODO */ 
            $yubi = new Auth_Yubico($this->yubi_id, $this->yubi_key,TRUE);
            $yubi->setURLpart($this->yubi_url);
	    $auth = $yubi->verify($otp);
            if (PEAR::isError($auth)){
                SimpleSAML_Logger::info($this->location . ': yubi verification error: username=\'' . $username . '\'');
                //throw new SimpleSAML_Error_Error('INVALIDYUBI',$auth->getMessage().$yubi->getLastResponse());
                throw new SimpleSAML_Error_Error('INVALIDYUBI');
                  }
            return TRUE;
        }

        private function createTables(){
            $q = "CREATE TABLE IF NOT EXISTS yubikeys (
                      yubikey VARCHAR (20),
                      PRIMARY KEY(yubikey),
                      uid VARCHAR(60)
                     );";
            $result = $this->dbh->query($q);
            $q = "CREATE TABLE IF NOT EXISTS status (
                      uid VARCHAR(60),
                      PRIMARY KEY(uid),
                      enable BOOL
                     );";
            $result = $this->dbh->query($q);
            $q = "CREATE TABLE IF NOT EXISTS potp (
                      id INT NOT NULL AUTO_INCREMENT, 
                      PRIMARY KEY(id),
                      uid VARCHAR(60),
                      potp VARCHAR(9)
                     );";
            $result = $this->dbh->query($q);
 /*var_dump($result);
 var_dump($this->dbh->errorInfo());
*/
           
        }

        public function enable2fa($uid){
          $q = "SELECT * from status WHERE uid=\"".$uid."\";";
          $result = $this->dbh->query($q);
          if ($result->rowCount() == 0)
          {
            $q = "INSERT INTO status (uid,enable) VALUES (\"".$uid."\",1);";
            $result = $this->dbh->query($q);
          }
          else{
            $q = "UPDATE status SET enable=\"1\" WHERE uid=\"".$uid."\";";
            $result = $this->dbh->query($q);
          }
/*
 var_dump($uid);
 var_dump($result);
 var_dump($this->dbh->errorInfo()); 
*/
          SimpleSAML_Logger::info('ldapandyubi: ' . $uid . ' turns ON the two-factor authentication.');
          return TRUE;
        }

        public function disable2fa($uid){
          $q = "UPDATE status SET enable=\"0\" WHERE uid=\"".$uid."\";";
          $result = $this->dbh->query($q);
/*
 var_dump($uid);
 var_dump($result);
 var_dump($this->dbh->errorInfo());
*/
          SimpleSAML_Logger::info('ldapandyubi: ' . $uid . ' turns OFF the two-factor authentication.');
          return TRUE;
        }

        public function isEnabled2fa($uid){
          $q = "SELECT * from status WHERE uid=\"".$uid."\";";
          $result = $this->dbh->query($q);
          $row = $result->fetch();
/*
 var_dump($result); 
 var_dump("ROW",$row["enable"]); 
 var_dump($this->dbh->errorInfo());
*/
          $enabled =  $row["enable"];
          $yubikeys = $this->listYubikey($uid);
          //var_dump($enabled,$yubikeys);
          return ($enabled AND count($yubikeys));
        }

        public function registerYubikey($uid,$yubi_id){
          if (!$yubi_id)
             return FALSE;
          $q = "SELECT yubikey FROM yubikeys WHERE yubikey=\"".$yubi_id."\" AND uid=\"".$uid."\";";
          $result = $this->dbh->query($q);
          if ($result->rowCount() > 0 )
            return FALSE;
          $q = "INSERT INTO yubikeys (uid,yubikey) VALUES (\"".$uid."\",\"".$yubi_id."\");";
          $result = $this->dbh->query($q);
/*
 var_dump($result); 
 var_dump($this->dbh->errorInfo());
*/
          SimpleSAML_Logger::info('ldapandyubi: ' . $uid . ' register his yubikey: '. $yubi_id);
          return TRUE;
        }

        public function deleteYubikey($uid,$yubi_id){
          $q = "DELETE FROM yubikeys WHERE uid=\"".$uid."\" AND yubikey=\"".$yubi_id."\";";
          $result = $this->dbh->query($q);
/*
 var_dump($result); 
 var_dump($this->dbh->errorInfo());
*/
          SimpleSAML_Logger::info('ldapandyubi: ' . $uid . ' delete his yubikey: '. $yubi_id);
          return TRUE;
        }

        public function listYubikey($uid){
          $q = "SELECT yubikey FROM yubikeys WHERE uid=\"".$uid."\";";
          $result = $this->dbh->query($q);
          $rows = $result->fetchAll();
/*
 var_dump($result); 
 var_dump($this->dbh->errorInfo());
 var_dump("listROW",$rows); 
*/
          $retarray=array();
          foreach($rows as $row)
          {
              $retarray[] = $row['yubikey'];
          }

          return $retarray;
        }

        public function getYubikeys(){
          $q = "SELECT uid,yubikey FROM yubikeys;";
          $result = $this->dbh->query($q);
          $rows = $result->fetchAll();
/*
 var_dump($result); 
 var_dump($this->dbh->errorInfo());
 var_dump("listROW",$rows); 
*/
          $retarray=array();
          foreach($rows as $row)
          {
              $retarray[] = array('uid' => $row['uid'],
                                   'yubikey' =>$row['yubikey']);
          }

          return $retarray;
        }

        public function getStatuses(){
          $q = "SELECT * FROM status;";
          $result = $this->dbh->query($q);
          $rows = $result->fetchAll();
/*
 var_dump($result); 
 var_dump($this->dbh->errorInfo());
 var_dump("listROW",$rows); 
*/
          $retarray=array();
          foreach($rows as $row)
          {
              $retarray[$row['uid']] = $row['enable'];
          }

          return $retarray;
        }

        public function getUidFromOtp($otp){
	  $yubikey = self::getYubiKeyPrefix($otp);
          $q = "SELECT uid FROM yubikeys WHERE yubikey=\"".$yubikey."\";";
          $result = $this->dbh->query($q);
          $row = $result->fetch();
          return $row['uid'];
        }

        public function getPOTPs($uid){
          $q = "SELECT potp FROM potp WHERE uid=\"".$uid."\";";
          $result = $this->dbh->query($q);
          $rows = $result->fetchAll();
          return $rows;
        }

        public function generatePOTPs($uid){
          $q = "DELETE FROM potp WHERE uid=\"".$uid."\";";
          $result = $this->dbh->query($q);

          $q = "INSERT INTO potp (uid,potp) VALUES ";
          for($i=0;$i<12;$i++){
            $potp = rand(100000000,999999999);
            $q .= " (\"".$uid."\",\"".$potp."\"),";
          }
          $q = preg_replace("/,$/",";",$q);
          $result = $this->dbh->exec($q);
          return TRUE;
        }

        public function isValidPOTP($uid,$potp){
          $q = "SELECT potp FROM potp WHERE uid=\"".$uid."\" AND potp=\"".$potp."\";";
          $result = $this->dbh->query($q);
          if ($result->rowCount() == 1 ){
            $q = "DELETE FROM potp WHERE uid=\"".$uid."\" AND potp=\"".$potp."\";";
            $result = $this->dbh->exec($q);
            return TRUE;
          }
          SimpleSAML_Logger::info('ldapandyubi:' . $this->authId . ': Login error (user ' . $uid . '), submit wrong potp!');
          throw new SimpleSAML_Error_Error('WRONGPOTP', $e);
          return FALSE;
        }
}

?>
